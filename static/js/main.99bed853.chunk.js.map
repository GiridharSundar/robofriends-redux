{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","constants.js","containers/App.js","action.js","registerServiceWorker.js","reducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Header","nextProps","nextState","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payLoad","fetch","then","response","json","data","payload","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.99bed853.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <h1 className='f1'>RoboFriends</h1>\r\n\t}\r\n}\r\n\r\nexport default Header;","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport {setSearchField,requestRobots} from '../action';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField : state.searchRobots.searchField,\r\n    isPending : state.requestRobots.isPending,\r\n    robots : state.requestRobots.robots,\r\n    error : state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchStateToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots : () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField , onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchStateToProps)(App);","import {\r\n\tCHANGE_SEARCHFIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype : CHANGE_SEARCHFIELD,\r\n\tpayLoad : text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type : REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({type : REQUEST_ROBOTS_SUCCESS,payload : data}))\r\n      .catch(err => dispatch({type : REQUEST_ROBOTS_FAILED,payload : error}))\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCHFIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialState = {\r\n\tsearchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState , action ={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCHFIELD:\r\n\t\t\treturn Object.assign({},state, {searchField : action.payLoad})\r\n\t\tdefault:\r\n\t\t\treturn initialState\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending : false,\r\n\trobots : [],\r\n\terror : ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots , action ={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state,{isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state,{error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore ,applyMiddleware,combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {createLogger} from 'redux-logger'; \r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {searchRobots, requestRobots} from './reducer'\r\nimport './index.css';\r\nimport 'tachyons'; \r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store = {store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}